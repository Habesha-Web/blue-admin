basePath: /api/v1
definitions:
  common.ResponseHTTP:
    properties:
      data: {}
      details:
        type: string
      page:
        type: integer
      size:
        type: integer
      success:
        type: boolean
      total:
        type: integer
    type: object
  common.ResponsePagination:
    properties:
      data: {}
      details:
        type: string
      page:
        type: integer
      pages:
        type: integer
      size:
        type: integer
      success:
        type: boolean
      total:
        type: integer
    type: object
  controllers.AppEndpointsMeta:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  controllers.AppFeaturesMeta:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  controllers.AppMeta:
    properties:
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/controllers.roles'
        type: array
      uuid:
        type: string
    type: object
  controllers.EndPointDropDown:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    - name
    type: object
  controllers.FeatureDropDown:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    - name
    type: object
  controllers.LoginPost:
    properties:
      email:
        maxLength: 32
        minLength: 6
        type: string
      grant_type:
        example: authorization_code
        type: string
      password:
        type: string
      token:
        type: string
    required:
    - grant_type
    type: object
  controllers.RoleDropDown:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    - name
    type: object
  controllers.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  controllers.UserPassword:
    properties:
      email:
        example: someone@domain.com
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.endpoints:
    properties:
      method:
        type: string
      name:
        type: string
      route_path:
        type: string
    type: object
  controllers.features:
    properties:
      endpoints:
        items:
          $ref: '#/definitions/controllers.endpoints'
        type: array
      name:
        type: string
    type: object
  controllers.roles:
    properties:
      features:
        items:
          $ref: '#/definitions/controllers.features'
        type: array
      name:
        type: string
    type: object
  messages.EmailMessage:
    properties:
      emails:
        items:
          type: string
        type: array
      message:
        type: string
      subject:
        type: string
    required:
    - emails
    - message
    - subject
    type: object
  models.AppGet:
    description: AppGet type information
    properties:
      active:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      uuid:
        type: string
    type: object
  models.AppPost:
    description: AppPost type information
    properties:
      active:
        type: boolean
      description:
        type: string
      name:
        type: string
    type: object
  models.Endpoint:
    description: App type information
    properties:
      description:
        type: string
      feature_id:
        type: number
      id:
        type: integer
      method:
        type: string
      name:
        type: string
      route_path:
        type: string
    type: object
  models.EndpointGet:
    description: EndpointGet type information
    properties:
      description:
        type: string
      feature_id:
        type: number
      id:
        type: integer
      method:
        type: string
      name:
        type: string
      route_path:
        type: string
    type: object
  models.EndpointPost:
    description: EndpointPost type information
    properties:
      description:
        type: string
      method:
        type: string
      name:
        type: string
      route_path:
        type: string
    type: object
  models.EndpointPut:
    description: EndpointPut type information
    properties:
      description:
        type: string
      id:
        type: integer
      method:
        type: string
      name:
        type: string
      route_path:
        type: string
    type: object
  models.Feature:
    description: App type information
    properties:
      active:
        type: boolean
      description:
        type: string
      endpoints:
        items:
          $ref: '#/definitions/models.Endpoint'
        type: array
      id:
        type: integer
      name:
        type: string
      role:
        type: number
    type: object
  models.FeatureGet:
    description: FeatureGet type information
    properties:
      active:
        type: boolean
      description:
        type: string
      endpoints:
        items:
          $ref: '#/definitions/models.Endpoint'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  models.FeaturePost:
    description: FeaturePost type information
    properties:
      active:
        type: boolean
      description:
        type: string
      name:
        type: string
    type: object
  models.FeaturePut:
    description: FeaturePut type information
    properties:
      active:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.JWTSalt:
    description: App type information
    properties:
      id:
        type: integer
      salt_a:
        type: string
      salt_b:
        type: string
    type: object
  models.Page:
    description: App type information
    properties:
      active:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  models.PageGet:
    description: PageGet type information
    properties:
      active:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  models.PagePatch:
    description: PagePatch type information
    properties:
      active:
        type: boolean
      description:
        type: string
      name:
        type: string
    type: object
  models.PagePost:
    description: PagePost type information
    properties:
      active:
        type: boolean
      description:
        type: string
      name:
        type: string
    type: object
  models.PagePut:
    description: PagePut type information
    properties:
      active:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Role:
    description: App type information
    properties:
      active:
        type: boolean
      app:
        type: number
      description:
        type: string
      features:
        items:
          $ref: '#/definitions/models.Feature'
        type: array
      id:
        type: integer
      name:
        type: string
      pages:
        items:
          $ref: '#/definitions/models.Page'
        type: array
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.RoleGet:
    description: RoleGet type information
    properties:
      active:
        type: boolean
      app:
        type: number
      description:
        type: string
      features:
        items:
          $ref: '#/definitions/models.Feature'
        type: array
      id:
        type: integer
      name:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.RolePost:
    description: RolePost type information
    properties:
      active:
        type: boolean
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  models.RolePut:
    description: RolePut type information
    properties:
      active:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.User:
    description: App type information
    properties:
      date_registered:
        type: string
      disabled:
        type: boolean
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      uuid:
        type: string
    type: object
  models.UserGet:
    description: UserGet type information
    properties:
      date_registered:
        type: string
      disabled:
        type: boolean
      email:
        type: string
      id:
        type: integer
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      uuid:
        type: string
    type: object
  models.UserNoRlnGet:
    description: UserGet type information
    properties:
      date_registered:
        type: string
      disabled:
        type: boolean
      email:
        type: string
      id:
        type: integer
      uuid:
        type: string
    type: object
  models.UserPost:
    description: UserPost type information
    properties:
      disabled:
        type: boolean
      email:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
  description: This is blue-admin API OPENAPI Documentation.
  termsOfService: http://swagger.io/terms/
  title: Swagger blue-admin API
  version: "0.1"
paths:
  /app:
    get:
      consumes:
      - application/json
      description: Get Apps
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.AppGet'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      - Refresh: []
      summary: Get Apps
      tags:
      - Apps
    post:
      consumes:
      - application/json
      description: Add App
      parameters:
      - description: Add App
        in: body
        name: app
        required: true
        schema:
          $ref: '#/definitions/models.AppPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.AppPost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add a new App
      tags:
      - Apps
  /app/{app_id}:
    delete:
      consumes:
      - application/json
      description: Remove app by ID
      parameters:
      - description: App ID
        in: path
        name: app_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Remove App by ID
      tags:
      - Apps
    get:
      consumes:
      - application/json
      description: Get app by ID
      parameters:
      - description: App ID
        in: path
        name: app_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.AppGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App by ID
      tags:
      - Apps
    patch:
      consumes:
      - application/json
      description: Patch App
      parameters:
      - description: Patch App
        in: body
        name: app
        required: true
        schema:
          $ref: '#/definitions/models.AppPost'
      - description: App ID
        in: path
        name: app_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.AppPost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Patch App
      tags:
      - Apps
  /appendpointuuid/{app_uuid}:
    get:
      consumes:
      - application/json
      description: Get app endpoints by UUID
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      - description: App UUID
        in: path
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.EndpointPut'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Endpoints by UUID
      tags:
      - Endpoints
  /appfeatureuuid/{app_uuid}:
    get:
      consumes:
      - application/json
      description: Get app features by UUID
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      - description: App UUID
        in: path
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.FeaturePut'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Features by UUID
      tags:
      - Features
  /apppagesuuid/{app_uuid}:
    get:
      consumes:
      - application/json
      description: Get app pages by UUID
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      - description: App UUID
        in: path
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.PagePut'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Pages by UUID
      tags:
      - Pages
  /approleuser/{role_id}/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete Role User
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: app uuid
        in: query
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.UserPost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add User
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Add Role User
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: app uuid
        in: query
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add User to Role
      tags:
      - RoleUsers
  /approleuuid/{app_uuid}:
    get:
      consumes:
      - application/json
      description: Get app roles by UUID
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      - description: App UUID
        in: path
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RolePut'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Roles by UUID
      tags:
      - Apps
  /appruid/{app_uuid}:
    get:
      consumes:
      - application/json
      description: Get app roles by UUID
      parameters:
      - description: App UUID
        in: path
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RolePut'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Roles by UUID
      tags:
      - Apps
  /appsdrop:
    get:
      consumes:
      - application/json
      description: Get FeatureDropDown
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controllers.FeatureDropDown'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get FeatureDropDown
      tags:
      - Feature
  /appuser/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove App user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: app uuid
        in: query
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Remove App User by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get App user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: app uuid
        in: query
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.UserGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App User by ID
      tags:
      - Users
  /appusers:
    get:
      consumes:
      - application/json
      description: Get App Users
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      - description: app uuid
        in: query
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserGet'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      - Refresh: []
      summary: Get App Users
      tags:
      - Users
  /checklogin:
    get:
      consumes:
      - application/json
      description: CheckLogin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/controllers.TokenResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Auth
      tags:
      - Authentication
  /clientmatrix/{app_uuid}:
    get:
      consumes:
      - application/json
      description: Get app endpoint role matrix by UUID
      parameters:
      - description: App UUID
        in: path
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Roles Matrix by UUID
      tags:
      - ClientOnly
  /clientmatrixpath/{app_uuid}:
    get:
      consumes:
      - application/json
      description: Get app endpoint role matrix by UUID
      parameters:
      - description: App UUID
        in: path
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Roles Matrix by UUID
      tags:
      - ClientOnly
  /dashboard:
    get:
      consumes:
      - application/json
      description: Get App summary by App ID
      parameters:
      - description: App ID
        in: query
        name: app_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/controllers.AppMeta'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get Roles Grouped By APP ID
      tags:
      - Dashboard Meta
  /dashboardends:
    get:
      consumes:
      - application/json
      description: Get App Endpoints summary
      parameters:
      - description: App ID
        in: query
        name: app_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/controllers.AppEndpointsMeta'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Endpoints Grouped By Role
      tags:
      - Dashboard Meta
  /dashboardfeat:
    get:
      consumes:
      - application/json
      description: Get App Featuers summary
      parameters:
      - description: App ID
        in: query
        name: app_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/controllers.AppFeaturesMeta'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Features Grouped By Role
      tags:
      - Dashboard Meta
  /dashboardpages:
    get:
      consumes:
      - application/json
      description: Get App Pages summary
      parameters:
      - description: App ID
        in: query
        name: app_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/controllers.AppFeaturesMeta'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Pages
      tags:
      - Dashboard Meta
  /dashboardroles:
    get:
      consumes:
      - application/json
      description: Get App Roles summary
      parameters:
      - description: App ID
        in: query
        name: app_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/controllers.AppFeaturesMeta'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get App Roles
      tags:
      - Dashboard Meta
  /dashboardrolespage:
    get:
      consumes:
      - application/json
      description: Get Roles by page by ID
      parameters:
      - description: App ID
        in: query
        name: app_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.PageGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get Page Roles for Secfic App by ID
      tags:
      - Dashboard Meta
  /droproles:
    get:
      consumes:
      - application/json
      description: Get RoleDropDown
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controllers.RoleDropDown'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get RoleDropDown
      tags:
      - Role
  /email:
    post:
      consumes:
      - application/json
      description: Sending Email
      parameters:
      - description: messages
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/messages.EmailMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/messages.EmailMessage'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Send Email to
      tags:
      - Utilities
  /endpoint:
    get:
      consumes:
      - application/json
      description: Get Endpoints
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.EndpointGet'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      - Refresh: []
      summary: Get Endpoints
      tags:
      - Endpoints
    post:
      consumes:
      - application/json
      description: Add Endpoint
      parameters:
      - description: Add Endpoint
        in: body
        name: endpoint
        required: true
        schema:
          $ref: '#/definitions/models.EndpointPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.EndpointPost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add a new Endpoint
      tags:
      - Endpoints
  /endpoint/{endpoint_id}:
    delete:
      consumes:
      - application/json
      description: Remove endpoint by ID
      parameters:
      - description: Endpoint ID
        in: path
        name: endpoint_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Remove Endpoint by ID
      tags:
      - Endpoints
    get:
      consumes:
      - application/json
      description: Get endpoint by ID
      parameters:
      - description: Endpoint ID
        in: path
        name: endpoint_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.EndpointGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get Endpoint by ID
      tags:
      - Endpoints
    patch:
      consumes:
      - application/json
      description: Patch Endpoint
      parameters:
      - description: Patch Endpoint
        in: body
        name: endpoint
        required: true
        schema:
          $ref: '#/definitions/models.EndpointPost'
      - description: Endpoint ID
        in: path
        name: endpoint_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.EndpointPost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Patch Endpoint
      tags:
      - Endpoints
  /endpointdrop:
    get:
      consumes:
      - application/json
      description: Get EndPointDropDown
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controllers.EndPointDropDown'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get EndPointDropDown
      tags:
      - EndPoints
  /endpointfeature/{endpoint_id}:
    delete:
      consumes:
      - application/json
      description: Delete Feature Endpoint
      parameters:
      - description: Feature ID
        in: path
        name: endpoint_id
        required: true
        type: integer
      - description: Endpoint ID
        in: query
        name: feature_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Delete Feature Endpoint
      tags:
      - Features
    patch:
      consumes:
      - application/json
      description: Add Feature to Endpoint
      parameters:
      - description: Endpoint ID
        in: path
        name: endpoint_id
        required: true
        type: integer
      - description: ' Feature ID'
        in: query
        name: feature_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add Feature to Endpoint
      tags:
      - Features
  /feature:
    get:
      consumes:
      - application/json
      description: Get Features
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.FeatureGet'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      - Refresh: []
      summary: Get Features
      tags:
      - Features
    post:
      consumes:
      - application/json
      description: Add Feature
      parameters:
      - description: Add Feature
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/models.FeaturePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.FeaturePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add a new Feature
      tags:
      - Features
  /feature/{feature_id}:
    delete:
      consumes:
      - application/json
      description: Remove feature by ID
      parameters:
      - description: Feature ID
        in: path
        name: feature_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Remove Feature by ID
      tags:
      - Features
    get:
      consumes:
      - application/json
      description: Get feature by ID
      parameters:
      - description: Feature ID
        in: path
        name: feature_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.FeatureGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get Feature by ID
      tags:
      - Features
    patch:
      consumes:
      - application/json
      description: Patch Feature
      parameters:
      - description: Patch Feature
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/models.FeaturePost'
      - description: Feature ID
        in: path
        name: feature_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.FeaturePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Patch Feature
      tags:
      - Features
  /featuredrop:
    get:
      consumes:
      - application/json
      description: Get FeatureDropDown
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controllers.FeatureDropDown'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get FeatureDropDown
      tags:
      - Feature
  /featurerole/{feature_id}:
    delete:
      consumes:
      - application/json
      description: Delete Role Feature
      parameters:
      - description: Role ID
        in: path
        name: feature_id
        required: true
        type: integer
      - description: Feature ID
        in: query
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Delete Role Feature
      tags:
      - Roles
    patch:
      consumes:
      - application/json
      description: Add Role to Feature
      parameters:
      - description: Feature ID
        in: path
        name: feature_id
        required: true
        type: integer
      - description: ' Role ID'
        in: query
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add Role to Feature
      tags:
      - Roles
  /features/{feature_id}:
    put:
      consumes:
      - application/json
      description: Activate/Deactivate Feature
      parameters:
      - description: Feature ID
        in: path
        name: feature_id
        required: true
        type: integer
      - description: Active
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.FeaturePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Activate/Deactivate Feature
      tags:
      - Feature
  /jwtsalt:
    get:
      consumes:
      - application/json
      description: Get JWTSalts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  $ref: '#/definitions/models.JWTSalt'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      - Refresh: []
      summary: Get JWTSalts
      tags:
      - JWTSalts
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/controllers.TokenResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      summary: Auth
      tags:
      - Authentication
  /page:
    get:
      consumes:
      - application/json
      description: Get Pages
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.PageGet'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      - Refresh: []
      summary: Get Pages
      tags:
      - Pages
    post:
      consumes:
      - application/json
      description: Add Page
      parameters:
      - description: Add Page
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/models.PagePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.PagePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add a new Page
      tags:
      - Pages
  /page/{page_id}:
    delete:
      consumes:
      - application/json
      description: Remove page by ID
      parameters:
      - description: Page ID
        in: path
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Remove Page by ID
      tags:
      - Pages
    get:
      consumes:
      - application/json
      description: Get page by ID
      parameters:
      - description: Page ID
        in: path
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.PageGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get Page by ID
      tags:
      - Pages
    patch:
      consumes:
      - application/json
      description: Patch Page
      parameters:
      - description: Patch Page
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/models.PagePost'
      - description: Page ID
        in: path
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.PagePatch'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Patch Page
      tags:
      - Pages
  /role:
    get:
      consumes:
      - application/json
      description: Get Roles
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RoleGet'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      - Refresh: []
      summary: Get Roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Add Role
      parameters:
      - description: Add Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.RolePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.RolePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add a new Role
      tags:
      - Roles
  /role/{role_id}:
    delete:
      consumes:
      - application/json
      description: Remove role by ID
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Remove Role by ID
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: Get role by ID
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.RoleGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get Role by ID
      tags:
      - Roles
    patch:
      consumes:
      - application/json
      description: Patch Role
      parameters:
      - description: Patch Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.RolePost'
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.RolePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Patch Role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Activate/Deactivate
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Active
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.RolePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Activate/Deactivate
      tags:
      - Role
  /role_endpoints:
    get:
      consumes:
      - application/json
      description: Get role EndPoints by ID
      parameters:
      - description: Role ID
        in: query
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.EndpointGet'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get EndPoints Role by ID
      tags:
      - Role
  /roleapp/{role_id}:
    delete:
      consumes:
      - application/json
      description: Delete App Role
      parameters:
      - description: App ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Role ID
        in: query
        name: app_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Delete App Role
      tags:
      - Apps
    patch:
      consumes:
      - application/json
      description: Add App to Role
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: ' App ID'
        in: query
        name: app_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add App to Role
      tags:
      - Apps
  /rolepage/{role_id}/{page_id}:
    delete:
      consumes:
      - application/json
      description: Delete Role Page
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Page ID
        in: path
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.PagePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add Page
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Add Role Page
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: Page ID
        in: path
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add Page to Role
      tags:
      - RolePages
  /roleuser/{role_id}/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete Role User
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.UserPost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add User
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Add Role User
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add User to Role
      tags:
      - RoleUsers
  /user:
    get:
      consumes:
      - application/json
      description: Get Users
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: page size
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponsePagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserGet'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      - Refresh: []
      summary: Get Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Add User
      parameters:
      - description: Add User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.UserPost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add a new User
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Put User
      parameters:
      - description: Password User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserPassword'
      - description: Reset Password
        in: query
        name: reset
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.UserGet'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Put User
      tags:
      - Users
  /user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Remove User by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.UserGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get User by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Patch User
      parameters:
      - description: Patch User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserPost'
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.UserPost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Patch User
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Activate/Deactivate User
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Disabled
        in: query
        name: status
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Activate/Deactivate User
      tags:
      - Users
  /userrole/{user_id}/{role_id}:
    delete:
      consumes:
      - application/json
      description: Delete User Role
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.RolePost'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add Role
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Add User Role
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Add Role to User
      tags:
      - UserRoles
  /useruuid:
    get:
      consumes:
      - application/json
      description: Get user by UUID
      parameters:
      - description: User UUID
        in: query
        name: uuid
        required: true
        type: string
      - description: App UUID
        in: query
        name: app_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/models.UserNoRlnGet'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseHTTP'
      security:
      - ApiKeyAuth: []
      summary: Get User by UUID
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    description: Description for what is this security definition being used
    in: header
    name: X-APP-TOKEN
    type: apiKey
  Refresh:
    description: Description for what is this security definition being used
    in: header
    name: X-REFRESH-TOKEN
    type: apiKey
swagger: "2.0"
